{"version":3,"sources":["components/NavbarListItem.tsx","components/Navbar.tsx","components/ContentPage.tsx","components/HomeContent.tsx","components/CardWrapper.tsx","components/ContactCard.tsx","components/ContactContent.tsx","components/ProjectCard.tsx","components/ProjectsContent.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["NavbarListItem","props","className","onClick","callback","title","Navbar","TOPNAV_CLASS_CLOSED","useState","isOpen","setOpen","navbarClass","setNavbarClass","topnavClass","setTopnavClass","toggleNavbar","navbarItemCallback","menu","menuItems","map","name","id","toggled","toggle","color","ContentPage","transitionStyles","entering","opacity","entered","exiting","exited","unmounted","Transition","in","inProp","timeout","unmountOnExit","state","style","content","HomeContent","accessory","body","circleColor","clothing","clothingColor","eyebrows","eyes","faceMask","faceMaskColor","facialHair","graphic","hair","hairColor","hat","hatColor","lashes","lipColor","mask","mouth","skinTone","CardWrapper","mainTitle","subtitle","children","ContactCard","href","target","rel","enableBackground","view_box","height","viewBox","width","xmlns","d","svg_path","card_title","ContactContent","contacts","setContacts","useEffect","fetch","headers","then","response","json","myJson","projectsList","contact","ProjectCard","src","imgSrc","alt","imgAlt","desc","ProjectsContent","projects","setProjects","project","img","App","contentList","item","setContent","setInProp","select","lookup","find","undefined","TypeError","setTimeout","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.63a453cb.chunk.js","sourcesContent":["import React from 'react';\n\ntype NavbarItemProps = {title: string, callback: any};\n\nfunction NavbarListItem(props: NavbarItemProps){\n    return(\n        <li><a className=\"navbar-item\" onClick={() => props.callback(props.title)}>{props.title}</a></li>\n    );\n}\n\nexport default NavbarListItem","import React, { useState } from 'react';\nimport NavbarListItem from './NavbarListItem';\nimport { Squash as Hamburger } from 'hamburger-react'\n\nfunction Navbar(props: {menuItems: string[], callback: any}){\n\n    const TOPNAV_CLASS_CLOSED = \"topnav\";\n    const TOPNAV_CLASS_RESPONSIVE = \"topnav responsive\";\n\n    const NAVBAR_CLASS_CLOSED = \"\";\n    const NAVBAR_CLASS_OPEN = \"mobile-open\";\n    \n    const [isOpen, setOpen] = useState(false);\n    const [navbarClass, setNavbarClass] = useState(NAVBAR_CLASS_CLOSED);\n    const [topnavClass, setTopnavClass] = useState(TOPNAV_CLASS_CLOSED);\n    \n    const toggleNavbar = () => {\n        if(isOpen){\n            setOpen(false)\n            setNavbarClass(NAVBAR_CLASS_CLOSED)\n            setTopnavClass(TOPNAV_CLASS_CLOSED)\n        } else {\n            setOpen(true)\n            setNavbarClass(NAVBAR_CLASS_OPEN)\n            setTopnavClass(TOPNAV_CLASS_RESPONSIVE)\n        }\n    }\n\n    // have to pass in a string, the title of the page to work with search\n    const navbarItemCallback = (title: string) => {\n        props.callback(title)\n        toggleNavbar()\n    }\n\n    var menu = props.menuItems.map(name => \n        <NavbarListItem \n            title={name} \n            callback={navbarItemCallback}\n        /> \n    );\n    \n    return(\n        <div id=\"navbar\" className={navbarClass}>\n            <div id=\"navbar-ul-wrapper\">\n                <ul id=\"navbar-item-wrapper\" className={topnavClass}>\n                    {menu}\n                </ul>\n                <Hamburger \n                    toggled={isOpen} \n                    toggle={toggleNavbar}\n                    color={'#fff'}\n                />\n            </div>  \n        </div>\n    );\n}\n\nexport default Navbar;","import { useState } from 'react';\nimport { Transition } from 'react-transition-group';\n\n//TODO: change content to children\nfunction ContentPage(props: {\n    id: string, \n    content: JSX.Element,\n    inProp: boolean\n}){\n\n    const transitionStyles = {\n        entering: { opacity: 1 },\n        entered:  { opacity: 1 },\n        exiting:  { opacity: 0 },\n        exited:  { opacity: 0 },\n        unmounted: { opacity: 0 }\n    }\n\n    return(\n        <Transition in={props.inProp} timeout={500} unmountOnExit={true}>\n            {state => (\n                <div \n                    style={transitionStyles[state]}\n                    id={props.id} \n                    className=\"content\"\n                >\n                    {props.content}\n                </div>\n            )}\n        </Transition>\n    );\n}\n\nexport default ContentPage;","import React from 'react';\nimport {BigHead} from '@bigheads/core';\n\nfunction HomeContent(){\n    return(\n        <>\n            <h1 className=\"fall-down-animation\">Damian Haziak</h1>\n            <p className=\"fall-down-animation\">Graduate Developer and Consultant looking for jobs in web development.</p>\n            <div id=\"home-image\" className=\"fall-down-animation\">\n                <BigHead\n                    accessory=\"shades\"\n                    body=\"chest\"\n                    circleColor=\"blue\"\n                    clothing=\"shirt\"\n                    clothingColor=\"white\"\n                    eyebrows=\"raised\"\n                    eyes=\"happy\"\n                    faceMask={false}\n                    faceMaskColor=\"red\"\n                    facialHair=\"none3\"\n                    graphic=\"react\"\n                    hair=\"short\"\n                    hairColor=\"black\"\n                    hat=\"none\"\n                    hatColor=\"red\"\n                    lashes\n                    lipColor=\"pink\"\n                    mask\n                    mouth=\"openSmile\"\n                    skinTone=\"light\"\n                />\n            </div>\n        </>\n    );\n}\n\nexport default HomeContent;","import React from 'react';\n\nfunction CardWrapper(props: {\n    mainTitle: string, \n    subtitle: string, \n    children?: JSX.Element | JSX.Element[]\n}){\n    return(\n        <>\n            <h2 className=\"main-title\">{props.mainTitle}</h2>\n            <p className=\"subtitle\">{props.subtitle}</p>\n            <div className=\"card-container\">\n                {props.children}\n            </div>\n        </>\n    )\n}\n\nexport default CardWrapper;","\nfunction ContactCard(props: {\n    href: string,\n    svg_path: string,\n    view_box: string,\n    card_title: string\n}){\n    return (\n        <a className=\"contact-card-container-anchor\" href={props.href} target=\"_blank\" rel=\"noreferrer\">\n            <div className=\"card-contact\">\n                <svg enableBackground={\"new \" + props.view_box} height=\"512\" viewBox={props.view_box} width=\"512\" xmlns=\"http://www.w3.org/2000/svg\"><path d={props.svg_path}/></svg>\n                <h3 className=\"card-title\">{props.card_title}</h3>\n            </div>\n        </a>\n    )\n}\n\nexport default ContactCard","import React, {useState, useEffect} from 'react';\nimport CardWrapper from './CardWrapper'\nimport ContactCard from './ContactCard'\n\ninterface Icontact {\n    href: string;\n    svg_path: string;\n    view_box: string;\n    card_title: string;\n}\n\nfunction ContactContent() {\n\n    const [contacts, setContacts] = useState<JSX.Element[]>()\n\n    useEffect(() => {\n        \n        //TODO: call fetch before render\n        fetch('data/contact.json',\n        {\n          headers : { \n            'Content-Type': 'application/json',\n            'Accept': 'application/json'\n           }\n        })\n        .then(response => {\n            return response.json()\n        })\n        .then(myJson => {\n            const projectsList = myJson.map((contact: Icontact) => \n                <ContactCard \n                    key={contact.href}\n                    href={contact.href}\n                    svg_path={contact.svg_path}\n                    view_box={contact.view_box}\n                    card_title={contact.card_title}\n                />\n            );\n            setContacts(projectsList)\n        });\n\n    }, [])\n\n    return (\n        <CardWrapper \n            mainTitle={\"Contact\"}\n            subtitle={\"Click on each icon to be sent to that webpage.\"}\n        >\n            {contacts}\n        </CardWrapper>\n    );\n}\n\nexport default ContactContent;","\nfunction ProjectCard(props: {\n    href: string,\n    imgSrc: string,\n    imgAlt: string,\n    title: string,\n    desc: string\n}){\n    return(\n        <a href={props.href} target=\"_blank\" rel=\"noreferrer\">\n            <div className=\"card\">\n                <img className=\"card-img\" src={props.imgSrc} alt={props.imgAlt} />\n                <h3 className=\"card-title\">{props.title}</h3>\n                <p className=\"card-description\">{props.desc}</p>\n            </div>\n        </a>\n    )\n}\n\nexport default ProjectCard","import React, { useState, useEffect } from 'react';\nimport CardWrapper from './CardWrapper'\nimport ProjectCard from './ProjectCard'\n\ninterface Iimg {\n    src: string;\n    alt: string;\n}\n\ninterface Iproject {\n    href: string;\n    img: Iimg;\n    \"card-title\": string;\n    \"card-desc\": string;\n}\n\nfunction ProjectsContent() {\n\n    const [projects, setProjects] = useState<JSX.Element[]>()\n\n    useEffect(() => {\n        \n        //TODO: Call fetch before render\n        fetch('data/projects.json',\n        {\n          headers : { \n            'Content-Type': 'application/json',\n            'Accept': 'application/json'\n           }\n        })\n        .then(response => {\n            return response.json()\n        })\n        .then(myJson => {\n            const projectsList = myJson.map((project: Iproject) => \n                <ProjectCard \n                    key={project.href}\n                    href={project.href}\n                    imgSrc={project.img.src}\n                    imgAlt={project.img.alt}\n                    title={project['card-title']}\n                    desc={project['card-desc']}\n                />\n            );\n            setProjects(projectsList)\n        });\n\n    }, [])\n\n    return (\n        <CardWrapper \n            mainTitle={\"Projects\"}\n            subtitle={\"Click on a card to be sent to a project related page\"}\n        >\n            {projects}\n        </CardWrapper>\n    );\n}\n\nexport default ProjectsContent;","import React, {useState} from 'react';\nimport './main.scss'\nimport Navbar from './components/Navbar';\nimport ContentPage from './components/ContentPage';\n\nimport HomeContent from './components/HomeContent';\nimport ContactContent from './components/ContactContent';\nimport ProjectsContent from './components/ProjectsContent';\n\ninterface Icontents {\n  id: string;\n  content: JSX.Element;\n}\n\nfunction App() {\n\n  let contentList: Array<Icontents> = [\n    {\n      id: \"home\",\n      content: <HomeContent key={\"home\"} />\n    },\n    {\n      id: \"projects\",\n      content: <ProjectsContent key={\"proj\"} />\n    },\n    {\n      id: \"contact\",\n      content: <ContactContent key={\"cont\"} />\n    }\n  ];\n\n  var menu = contentList.map(item => item.id);\n\n  const [content, setContent] = useState<Icontents>(contentList[0]);\n  const [inProp, setInProp] = useState<boolean>(true);\n\n  function selectContent(select: string) {\n    const lookup = contentList.find(item => item.id === select);\n    // Throw error if undefined, as Array.find can technically fail to find something\n    if (lookup === undefined){\n      throw new TypeError('Lookup did not find this type of content');\n    } else if (lookup.id === content.id) {\n      // do nothing if current page is selected\n      return;\n    }\n    setInProp(false)\n    setTimeout(() => {\n      setContent(lookup)\n      setInProp(true)\n    }, 250)\n  }\n\n  return (\n    <>\n        <Navbar \n          menuItems={menu} \n          callback={selectContent}\n        />\n        <ContentPage \n          id={content.id} \n          content={content.content} \n          inProp={inProp}\n        />\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'material-icons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}